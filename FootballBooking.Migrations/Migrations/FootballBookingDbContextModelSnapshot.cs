// <auto-generated />
using System;
using FootballBooking.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballBooking.Migrations
{
    [DbContext(typeof(FootballBookingDbContext))]
    partial class FootballBookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FootballBooking.Entities.Model.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StadiumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BookerId" }, "IX_Address_BookerId")
                        .IsUnique()
                        .HasFilter("([BookerId] IS NOT NULL)");

                    b.HasIndex(new[] { "StadiumId" }, "IX_Address_StadiumId")
                        .IsUnique()
                        .HasFilter("([StadiumId] IS NOT NULL)");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("FootballBooking.Entities.Model.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BookerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StadiumId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BookerId" }, "IX_Booking_BookerId");

                    b.HasIndex(new[] { "StadiumId" }, "IX_Booking_StadiumId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("FootballBooking.Entities.Model.Stadium", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<Guid>("StadiumOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StadiumStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StadiumOwnerId" }, "IX_Stadium_StadiumOwnerId");

                    b.ToTable("Stadium", (string)null);
                });

            modelBuilder.Entity("FootballBooking.Entities.Model.StadiumBooking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StadiumId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("BookingId");

                    b.HasIndex("StadiumId");

                    b.ToTable("StadiumBooking", (string)null);
                });

            modelBuilder.Entity("FootballBooking.Entities.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FootballBooking.Entities.Model.Address", b =>
                {
                    b.HasOne("FootballBooking.Entities.Model.User", "Booker")
                        .WithOne("Address")
                        .HasForeignKey("FootballBooking.Entities.Model.Address", "BookerId")
                        .HasConstraintName("FK_Address_User");

                    b.HasOne("FootballBooking.Entities.Model.Stadium", "Stadium")
                        .WithOne("Address")
                        .HasForeignKey("FootballBooking.Entities.Model.Address", "StadiumId");

                    b.Navigation("Booker");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("FootballBooking.Entities.Model.Booking", b =>
                {
                    b.HasOne("FootballBooking.Entities.Model.User", "Booker")
                        .WithMany("Bookings")
                        .HasForeignKey("BookerId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_User");

                    b.Navigation("Booker");
                });

            modelBuilder.Entity("FootballBooking.Entities.Model.StadiumBooking", b =>
                {
                    b.HasOne("FootballBooking.Entities.Model.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_StadiumBooking_Booking");

                    b.HasOne("FootballBooking.Entities.Model.Stadium", "Stadium")
                        .WithMany()
                        .HasForeignKey("StadiumId")
                        .IsRequired()
                        .HasConstraintName("FK_StadiumBooking_Stadium");

                    b.Navigation("Booking");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("FootballBooking.Entities.Model.Stadium", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("FootballBooking.Entities.Model.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
